{
  "Alto Impacto / Baixo Esforço": [
    "Definir convenções de código e padrões de revisão: documentar regras de estilo, critérios mínimos de revisão e checklist de merge para reduzir bugs e acelerar revisões.",
    "Estabelecer pipeline de integração contínua básica: configurar verificação automática de builds e testes unitários simples para bloquear alterações que quebrem o produto.",
    "Criar ambiente de desenvolvimento replicável: scripts e documentação para que qualquer desenvolvedor rode a aplicação localmente com dados de exemplo.",
    "Implementar autenticação e autorização simples: fluxo seguro de login e controle básico de permissões para proteger endpoints críticos.",
    "Configurar sistema de logs estruturados: logar eventos essenciais com contexto suficiente para depuração sem poluir o sistema.",
    "Adicionar telemetria de erros mínima: capturar e agrupar exceções para priorizar correções pelo impacto real em usuários.",
    "Estabelecer contrato de API inicial: documentar rotas e formatos de payload para alinhar frontend e backend e reduzir retrabalho.",
    "Criar mock de serviços externos para desenvolvimento: permitir desenvolvimento e testes offline sem dependência de terceiros.",
    "Definir estratégia mínima de cache para rotas críticas: reduzir latência em endpoints de leitura frequente com regras simples de invalidação.",
    "Configurar monitoramento de saúde básica: endpoints de status e alertas simples para detectar indisponibilidade rápida.",
    "Padronizar gestão de ambientes e variáveis de configuração: documentar como segregar dados sensíveis e parâmetros entre dev/staging/prod.",
    "Criar scripts de seed/fixtures para dados de teste: popular ambiente de dev com cenários realistas para QA e demonstrações.",
    "Estabelecer política de versionamento de dependências: definir como e quando atualizar bibliotecas para reduzir incidentes por breaking changes.",
    "Instrumentar métricas-chave iniciais: definir e coletar métricas básicas de uso e performance para orientar decisões iniciais.",
    "Documentar processo de deploy manual seguro: passo a passo para publicar mudanças em produção com checklist de verificação."
  ],
  "Alto Impacto / Alto Esforço": [
    "Projetar arquitetura escalável por domínios: definir limites claros entre responsabilidades, modelos de dados e contratos para permitir crescimento sustentável.",
    "Construir sistema de orquestração de rotas em tempo real: pipeline que recebe localização, calcula correspondências e atualiza estado de corridas em baixa latência.",
    "Implementar pipeline de dados para análises históricas: capturar, processar e armazenar eventos de uso para relatórios e treinamento de modelos de decisão.",
    "Desenvolver subsistema central de pagamentos e conciliação: fluxo seguro e auditável de cobrança, repasse e tratamento de falhas financeiras.",
    "Criar mecanismo robusto de gerenciamento de filas: garantir entrega confiável de mensagens assíncronas entre componentes críticos do sistema.",
    "Projetar e executar estratégia de recuperação de desastre: RTO/RPO definidos, backups e testes de restauração regulares para garantir continuidade.",
    "Construir plataforma de observabilidade consolidada: métricas, logs e traces correlacionados para investigação profunda de incidentes.",
    "Desenvolver sistema de autorização granular e políticas de segurança: controle de acesso baseado em funções e contextos operacionais.",
    "Implementar processo maduro de testes end-to-end e integração: garantir cobertura de fluxos críticos que simulam comportamento real do usuário.",
    "Planejar e executar estratégia de deploy contínuo com rollbacks seguros: reduzir downtime e permitir reversões controladas quando necessário.",
    "Criar mecanismo de detecção e mitigação de fraudes em produção: regras e análises para identificar comportamento anômalo e proteger receita.",
    "Desenvolver solução para balanceamento e escalonamento automático de cargas: garantir performance estável sob variações de tráfego.",
    "Construir camada de experiência de mapas e roteirização com fallback: fluxo que atende a cenários de mapa inconsistentes e degrada graciosamente.",
    "Projetar modelo de telemetria para otimização operacional: métricas para decisões de alocação de recursos e planejamento de demanda.",
    "Montar processo de governança de mudanças e compliance: auditoria, aprovação e documentação para alterações de alta criticidade."
  ],
  "Baixo Impacto / Baixo Esforço": [
    "Criar documentação de onboarding de desenvolvedores: guia passo a passo para novos membros entenderem o projeto e começarem a contribuir.",
    "Padronizar scripts utilitários de build e formatação: facilitar tarefas repetitivas do dia a dia e manter consistência do código.",
    "Adicionar pequenas melhorias de UX em telas de baixa complexidade: ajustes de texto, help contextuais e microinterações que aumentam a clareza.",
    "Implementar testes unitários para componentes críticos isolados: aumentar confiança em mudanças sem necessidade de testes complexos.",
    "Organizar e versionar exemplos de payloads e cenários de teste: facilitar comunicação entre times e reduzir mal-entendidos em integrações.",
    "Automatizar envios de alertas não-críticos: notificações para anomalias de baixa prioridade que ajudam monitoramento sem ruído excessivo.",
    "Criar checklists de revisão e QA para releases menores: reduzir regressões em entregas frequentes e pequenas.",
    "Padronizar nomes e estruturas de pastas para mobile e web: facilitar navegação no repositório e manutenção do projeto.",
    "Implementar mecanismo simples de favoritar/endereço rápido no cliente: pequena melhoria de conveniência para usuários frequentes.",
    "Refinar mensagens de erro e validações no frontend: melhorar compreensão do usuário em casos de input incorreto.",
    "Configurar rotinas de limpeza de dados de teste em ambientes de dev: manter ambiente limpo e previsível para testes.",
    "Criar templates para issues e PRs no repositório: acelerar triagem e padronizar informações necessárias em solicitações.",
    "Implementar logging local detalhado apenas para desenvolvimento: facilitar debugging sem poluir produção.",
    "Adicionar páginas estáticas de suporte e políticas no app: comunicação clara para usuários sem intervenção do time.",
    "Documentar padrões de arquitetura escolhidos com decisões arquiteturais: por que certas abordagens foram adotadas para referência futura."
  ],
  "Baixo Impacto / Alto Esforço": [
    "Reescrever monolito para arquitetura distribuída sem necessidade clara: esforço profundo de migração que pode interromper entregas se não bem justificado.",
    "Construir plataforma própria de processamento analítico histórico do zero: projeto caro para casos onde soluções mais simples já atendem inicialmente.",
    "Implementar sincronização completa offline para clientes: replicação bidirecional e resolução de conflitos exigem projeto complexo para pouco ganho inicial.",
    "Desenvolver mecanismo interno de mensageria altamente customizado: grande custo de manutenção comparado a alternativas maduras.",
    "Criar sistema extensivo de personalização por usuário em tempo real: complexidade alta para ganhos marginais nas primeiras fases.",
    "Implementar controle distribuído de configuração multi-região sem demanda: sincronização e consistência acrescentam overhead operacional alto.",
    "Realizar migração de dados massiva entre formatos em produção: risco alto e custo operacional para benefícios de curto prazo incertos.",
    "Construir solução proprietária de observabilidade completa do zero: desenvolvimento e integração custosos frente a abordagens incrementais.",
    "Projetar sistema de gamificação global com mecânicas complexas: esforço grande para retorno incerto na retenção inicial.",
    "Implementar roteamento dinâmico cross-region automático: lidar com latência, consistência e custo operacional torna-se muito complexo.",
    "Criar infra-estrutura de testes por simulação de tráfego em produção na escala total: alto custo de infraestrutura e risco operacional.",
    "Desenvolver camada de integração completa com múltiplos serviços externos simultâneos: coordenação e garantia de contrapartes elevam complexidade.",
    "Construir sistema de concessão de permissões avançado por atributo em toda a plataforma: projeto profundo de segurança e governança.",
    "Substituir pilha de comunicação interna sem ganhos claros de performance: reengenharia que pode atrasar roadmap estratégico.",
    "Implementar versionamento histórico completo e rollback de dados por transação: complexidade operacional e custo de armazenamento muito altos."
  ]
}
